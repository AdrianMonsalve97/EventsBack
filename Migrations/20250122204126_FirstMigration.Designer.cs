// <auto-generated />
using System;
using EventsApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EventsApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250122204126_FirstMigration")]
    partial class FirstMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EventsApi.Domain.Entities.Empresa", b =>
                {
                    b.Property<string>("IndentificacionEmpresa")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("IdentificacionEmpresa");

                    b.Property<string>("NombreContactoEmpresa")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("NombreContactoEmpresa");

                    b.Property<string>("NombreEmpresa")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("NombreEmpresa");

                    b.Property<string>("NumeroContatoEmpresa")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("NumeroContatoEmpresa");

                    b.Property<int>("TipoDocumento")
                        .HasColumnType("int");

                    b.HasKey("IndentificacionEmpresa");

                    b.ToTable("Empresas", (string)null);
                });

            modelBuilder.Entity("EventsApi.Domain.Entities.Evento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AsistentesRegistrados")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("CapacidadMaxima")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("FechaHora")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Prioridad")
                        .HasColumnType("int");

                    b.Property<string>("Ubicacion")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("UsuarioCreadorId")
                        .HasColumnType("int");

                    b.Property<string>("UsuarioCreadorNombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioCreadorId");

                    b.ToTable("Eventos", (string)null);
                });

            modelBuilder.Entity("EventsApi.Domain.Entities.Inscripcion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EventoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaInscripcion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Inscripciones", (string)null);
                });

            modelBuilder.Entity("EventsApi.Domain.Entities.Proveedor", b =>
                {
                    b.Property<string>("IdentificacionProveedor")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("IdentificacionProveedor");

                    b.Property<string>("NombreProveedor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("NombreProveedor");

                    b.Property<int>("TipoDocumento")
                        .HasColumnType("int");

                    b.HasKey("IdentificacionProveedor");

                    b.ToTable("Proveedores", (string)null);
                });

            modelBuilder.Entity("EventsApi.Domain.Entities.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("CelularCorporativo")
                        .HasColumnType("bigint");

                    b.Property<long>("CelularPersonal")
                        .HasColumnType("bigint");

                    b.Property<string>("CorreoCorporativo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CorreoPersonal")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("DocumentoIdentidad")
                        .HasColumnType("bigint");

                    b.Property<string>("EmpresaIndentificacionEmpresa")
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("FechaContratoFin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaContratoInicio")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Rol")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<int>("TipoDocumento")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaIndentificacionEmpresa");

                    b.ToTable("Usuarios", (string)null);
                });

            modelBuilder.Entity("EventsApi.Domain.Entities.Evento", b =>
                {
                    b.HasOne("EventsApi.Domain.Entities.Usuario", "UsuarioCreador")
                        .WithMany("EventosCreados")
                        .HasForeignKey("UsuarioCreadorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Eventos_Usuarios");

                    b.OwnsOne("EventsApi.Domain.Entities.FechasEventos", "Fechas", b1 =>
                        {
                            b1.Property<int>("EventoId")
                                .HasColumnType("int");

                            b1.Property<DateTime>("FechaAprovacion")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime>("FechaAsignacion")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime>("FechaCotizacion")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime>("FechaFin")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime>("FechaInicio")
                                .HasColumnType("datetime2");

                            b1.HasKey("EventoId");

                            b1.ToTable("Eventos");

                            b1.WithOwner()
                                .HasForeignKey("EventoId");
                        });

                    b.Navigation("Fechas")
                        .IsRequired();

                    b.Navigation("UsuarioCreador");
                });

            modelBuilder.Entity("EventsApi.Domain.Entities.Inscripcion", b =>
                {
                    b.HasOne("EventsApi.Domain.Entities.Evento", "Evento")
                        .WithMany("Inscripciones")
                        .HasForeignKey("EventoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Inscripciones_Eventos");

                    b.HasOne("EventsApi.Domain.Entities.Usuario", "Usuario")
                        .WithMany("Inscripciones")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Inscripciones_Usuarios");

                    b.Navigation("Evento");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("EventsApi.Domain.Entities.Usuario", b =>
                {
                    b.HasOne("EventsApi.Domain.Entities.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaIndentificacionEmpresa");

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("EventsApi.Domain.Entities.Evento", b =>
                {
                    b.Navigation("Inscripciones");
                });

            modelBuilder.Entity("EventsApi.Domain.Entities.Usuario", b =>
                {
                    b.Navigation("EventosCreados");

                    b.Navigation("Inscripciones");
                });
#pragma warning restore 612, 618
        }
    }
}
